// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DigitalOcean SSH key resource to allow you to manage SSH
// keys for Droplet access. Keys created with this resource
// can be referenced in your droplet configuration via their ID or
// fingerprint.
type SSHKey struct {
	s *pulumi.ResourceState
}

// NewSSHKey registers a new resource with the given unique name, arguments, and options.
func NewSSHKey(ctx *pulumi.Context,
	name string, args *SSHKeyArgs, opts ...pulumi.ResourceOpt) (*SSHKey, error) {
	if args == nil || args.PublicKey == nil {
		return nil, errors.New("missing required argument 'PublicKey'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["publicKey"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["publicKey"] = args.PublicKey
	}
	inputs["fingerprint"] = nil
	s, err := ctx.RegisterResource("do:core/sSHKey:SSHKey", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SSHKey{s: s}, nil
}

// GetSSHKey gets an existing SSHKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSSHKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SSHKeyState, opts ...pulumi.ResourceOpt) (*SSHKey, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["fingerprint"] = state.Fingerprint
		inputs["name"] = state.Name
		inputs["publicKey"] = state.PublicKey
	}
	s, err := ctx.ReadResource("do:core/sSHKey:SSHKey", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SSHKey{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SSHKey) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SSHKey) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The fingerprint of the SSH key
func (r *SSHKey) Fingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fingerprint"])
}

// The name of the SSH key for identification
func (r *SSHKey) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The public key. If this is a file, it
// can be read using the file interpolation function
func (r *SSHKey) PublicKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["publicKey"])
}

// Input properties used for looking up and filtering SSHKey resources.
type SSHKeyState struct {
	// The fingerprint of the SSH key
	Fingerprint interface{}
	// The name of the SSH key for identification
	Name interface{}
	// The public key. If this is a file, it
	// can be read using the file interpolation function
	PublicKey interface{}
}

// The set of arguments for constructing a SSHKey resource.
type SSHKeyArgs struct {
	// The name of the SSH key for identification
	Name interface{}
	// The public key. If this is a file, it
	// can be read using the file interpolation function
	PublicKey interface{}
}
