"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Provides a DigitalOcean Block Storage volume which can be attached to a Droplet in order to provide expanded storage.
 */
class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new Volume(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["dropletIds"] = state ? state.dropletIds : undefined;
            inputs["filesystemLabel"] = state ? state.filesystemLabel : undefined;
            inputs["filesystemType"] = state ? state.filesystemType : undefined;
            inputs["initialFilesystemLabel"] = state ? state.initialFilesystemLabel : undefined;
            inputs["initialFilesystemType"] = state ? state.initialFilesystemType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["snapshotId"] = state ? state.snapshotId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.region === undefined) {
                throw new Error("Missing required property 'region'");
            }
            if (!args || args.size === undefined) {
                throw new Error("Missing required property 'size'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["filesystemType"] = args ? args.filesystemType : undefined;
            inputs["initialFilesystemLabel"] = args ? args.initialFilesystemLabel : undefined;
            inputs["initialFilesystemType"] = args ? args.initialFilesystemType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["snapshotId"] = args ? args.snapshotId : undefined;
            inputs["dropletIds"] = undefined /*out*/;
            inputs["filesystemLabel"] = undefined /*out*/;
        }
        super("do:core/volume:Volume", name, inputs, opts);
    }
}
exports.Volume = Volume;
//# sourceMappingURL=volume.js.map