"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Provides a DigitalOcean Load Balancer resource. This can be used to create,
 * modify, and delete Load Balancers.
 */
class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new LoadBalancer(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["algorithm"] = state ? state.algorithm : undefined;
            inputs["dropletIds"] = state ? state.dropletIds : undefined;
            inputs["dropletTag"] = state ? state.dropletTag : undefined;
            inputs["forwardingRules"] = state ? state.forwardingRules : undefined;
            inputs["healthcheck"] = state ? state.healthcheck : undefined;
            inputs["ip"] = state ? state.ip : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["redirectHttpToHttps"] = state ? state.redirectHttpToHttps : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["stickySessions"] = state ? state.stickySessions : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.forwardingRules === undefined) {
                throw new Error("Missing required property 'forwardingRules'");
            }
            if (!args || args.region === undefined) {
                throw new Error("Missing required property 'region'");
            }
            inputs["algorithm"] = args ? args.algorithm : undefined;
            inputs["dropletIds"] = args ? args.dropletIds : undefined;
            inputs["dropletTag"] = args ? args.dropletTag : undefined;
            inputs["forwardingRules"] = args ? args.forwardingRules : undefined;
            inputs["healthcheck"] = args ? args.healthcheck : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["redirectHttpToHttps"] = args ? args.redirectHttpToHttps : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["stickySessions"] = args ? args.stickySessions : undefined;
            inputs["ip"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        super("do:core/loadBalancer:LoadBalancer", name, inputs, opts);
    }
}
exports.LoadBalancer = LoadBalancer;
//# sourceMappingURL=loadBalancer.js.map