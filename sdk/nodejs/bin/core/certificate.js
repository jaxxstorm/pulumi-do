"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Provides a DigitalOcean Certificate resource that allows you to manage
 * certificates for configuring TLS termination in Load Balancers.
 * Certificates created with this resource can be referenced in your
 * Load Balancer configuration via their ID.
 */
class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new Certificate(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["certificateChain"] = state ? state.certificateChain : undefined;
            inputs["domains"] = state ? state.domains : undefined;
            inputs["leafCertificate"] = state ? state.leafCertificate : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notAfter"] = state ? state.notAfter : undefined;
            inputs["privateKey"] = state ? state.privateKey : undefined;
            inputs["sha1Fingerprint"] = state ? state.sha1Fingerprint : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            inputs["certificateChain"] = args ? args.certificateChain : undefined;
            inputs["domains"] = args ? args.domains : undefined;
            inputs["leafCertificate"] = args ? args.leafCertificate : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["privateKey"] = args ? args.privateKey : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["notAfter"] = undefined /*out*/;
            inputs["sha1Fingerprint"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        super("do:core/certificate:Certificate", name, inputs, opts);
    }
}
exports.Certificate = Certificate;
//# sourceMappingURL=certificate.js.map