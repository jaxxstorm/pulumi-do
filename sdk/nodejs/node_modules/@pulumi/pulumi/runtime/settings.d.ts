import { ComponentResource } from "../resource";
/**
 * excessiveDebugOutput enables, well, pretty excessive debug output pertaining to resources and properties.
 */
export declare let excessiveDebugOutput: boolean;
/**
 * Options is a bag of settings that controls the behavior of previews and deployments
 */
export interface Options {
    readonly project?: string;
    readonly stack?: string;
    readonly dryRun?: boolean;
    readonly parallel?: number;
    readonly engineAddr?: string;
    readonly monitorAddr?: string;
}
/**
 * Returns true if we're currently performing a dry-run, or false if this is a true update.
 */
export declare function isDryRun(): boolean;
/**
 * Get the project being run by the current update.
 */
export declare function getProject(): string | undefined;
/**
 * Get the stack being targeted by the current update.
 */
export declare function getStack(): string | undefined;
/**
 * hasMonitor returns true if we are currently connected to a resource monitoring service.
 */
export declare function hasMonitor(): boolean;
/**
 * getMonitor returns the current resource monitoring service client for RPC communications.
 */
export declare function getMonitor(): Object;
/**
 * getEngine returns the current engine, if any, for RPC communications back to the resource engine.
 */
export declare function getEngine(): Object | undefined;
/**
 * serialize returns true if resource operations should be serialized.
 */
export declare function serialize(): boolean;
/**
 * disconnect permanently disconnects from the server, closing the connections.  It waits for the existing RPC
 * queue to drain.  If any RPCs come in afterwards, however, they will crash the process.
 */
export declare function disconnect(): void;
/**
 * disconnectSync permanently disconnects from the server, closing the connections. Unlike `disconnect`. it does not
 * wait for the existing RPC queue to drain. Any RPCs that come in after this call will crash the process.
 */
export declare function disconnectSync(): void;
/**
 * rpcKeepAlive registers a pending call to ensure that we don't prematurely disconnect from the server.  It returns
 * a function that, when invoked, signals that the RPC has completed.
 */
export declare function rpcKeepAlive(): () => void;
/**
 * getRootResource returns a root resource that will automatically become the default parent of all resources.  This
 * can be used to ensure that all resources without explicit parents are parented to a common parent resource.
 */
export declare function getRootResource(): ComponentResource | undefined;
/**
 * setRootResource registers a resource that will become the default parent for all resources without explicit parents.
 */
export declare function setRootResource(res: ComponentResource | undefined): void;
