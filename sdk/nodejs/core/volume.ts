// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a DigitalOcean Block Storage volume which can be attached to a Droplet in order to provide expanded storage.
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState): Volume {
        return new Volume(name, <any>state, { id });
    }

    /**
     * A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
     */
    public readonly description: pulumi.Output<string | undefined>;
    /**
     * A list of associated droplet ids
     */
    public /*out*/ readonly dropletIds: pulumi.Output<number[]>;
    public /*out*/ readonly filesystemLabel: pulumi.Output<string>;
    public readonly filesystemType: pulumi.Output<string>;
    public readonly initialFilesystemLabel: pulumi.Output<string | undefined>;
    public readonly initialFilesystemType: pulumi.Output<string | undefined>;
    /**
     * A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters.
     */
    public readonly name: pulumi.Output<string>;
    /**
     * The region that the block storage volume will be created in.
     */
    public readonly region: pulumi.Output<string>;
    /**
     * The size of the block storage volume in GiB.
     */
    public readonly size: pulumi.Output<number>;
    public readonly snapshotId: pulumi.Output<string | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: VolumeState = argsOrState as VolumeState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dropletIds"] = state ? state.dropletIds : undefined;
            inputs["filesystemLabel"] = state ? state.filesystemLabel : undefined;
            inputs["filesystemType"] = state ? state.filesystemType : undefined;
            inputs["initialFilesystemLabel"] = state ? state.initialFilesystemLabel : undefined;
            inputs["initialFilesystemType"] = state ? state.initialFilesystemType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["snapshotId"] = state ? state.snapshotId : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if (!args || args.region === undefined) {
                throw new Error("Missing required property 'region'");
            }
            if (!args || args.size === undefined) {
                throw new Error("Missing required property 'size'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["filesystemType"] = args ? args.filesystemType : undefined;
            inputs["initialFilesystemLabel"] = args ? args.initialFilesystemLabel : undefined;
            inputs["initialFilesystemType"] = args ? args.initialFilesystemType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["snapshotId"] = args ? args.snapshotId : undefined;
            inputs["dropletIds"] = undefined /*out*/;
            inputs["filesystemLabel"] = undefined /*out*/;
        }
        super("do:core/volume:Volume", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * A list of associated droplet ids
     */
    readonly dropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    readonly filesystemLabel?: pulumi.Input<string>;
    readonly filesystemType?: pulumi.Input<string>;
    readonly initialFilesystemLabel?: pulumi.Input<string>;
    readonly initialFilesystemType?: pulumi.Input<string>;
    /**
     * A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The region that the block storage volume will be created in.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * The size of the block storage volume in GiB.
     */
    readonly size?: pulumi.Input<number>;
    readonly snapshotId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
     */
    readonly description?: pulumi.Input<string>;
    readonly filesystemType?: pulumi.Input<string>;
    readonly initialFilesystemLabel?: pulumi.Input<string>;
    readonly initialFilesystemType?: pulumi.Input<string>;
    /**
     * A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The region that the block storage volume will be created in.
     */
    readonly region: pulumi.Input<string>;
    /**
     * The size of the block storage volume in GiB.
     */
    readonly size: pulumi.Input<number>;
    readonly snapshotId?: pulumi.Input<string>;
}
