// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a DigitalOcean DNS record resource.
 */
export class DNSRecord extends pulumi.CustomResource {
    /**
     * Get an existing DNSRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DNSRecordState): DNSRecord {
        return new DNSRecord(name, <any>state, { id });
    }

    /**
     * The domain to add the record to
     */
    public readonly domain: pulumi.Output<string>;
    /**
     * The flags of the record (integer between 0-255), for CAA records.
     */
    public readonly flags: pulumi.Output<number | undefined>;
    /**
     * The FQDN of the record
     */
    public /*out*/ readonly fqdn: pulumi.Output<string>;
    /**
     * The name of the record
     */
    public readonly name: pulumi.Output<string>;
    /**
     * The port of the record, for SRV records.
     */
    public readonly port: pulumi.Output<number | undefined>;
    /**
     * The priority of the record, for MX and SRV
     * records.
     */
    public readonly priority: pulumi.Output<number | undefined>;
    /**
     * The tag of the record (one of `issue`, `wildissue`, or `iodef`), for CAA records.
     */
    public readonly tag: pulumi.Output<string | undefined>;
    /**
     * The time to live for the record, in seconds.
     */
    public readonly ttl: pulumi.Output<number>;
    /**
     * The type of record
     */
    public readonly type: pulumi.Output<string>;
    /**
     * The value of the record
     */
    public readonly value: pulumi.Output<string>;
    /**
     * The weight of the record, for SRV records.
     */
    public readonly weight: pulumi.Output<number | undefined>;

    /**
     * Create a DNSRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DNSRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DNSRecordArgs | DNSRecordState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: DNSRecordState = argsOrState as DNSRecordState | undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["flags"] = state ? state.flags : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["tag"] = state ? state.tag : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["value"] = state ? state.value : undefined;
            inputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as DNSRecordArgs | undefined;
            if (!args || args.domain === undefined) {
                throw new Error("Missing required property 'domain'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            if (!args || args.value === undefined) {
                throw new Error("Missing required property 'value'");
            }
            inputs["domain"] = args ? args.domain : undefined;
            inputs["flags"] = args ? args.flags : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["tag"] = args ? args.tag : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["value"] = args ? args.value : undefined;
            inputs["weight"] = args ? args.weight : undefined;
            inputs["fqdn"] = undefined /*out*/;
        }
        super("do:core/dNSRecord:DNSRecord", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DNSRecord resources.
 */
export interface DNSRecordState {
    /**
     * The domain to add the record to
     */
    readonly domain?: pulumi.Input<string>;
    /**
     * The flags of the record (integer between 0-255), for CAA records.
     */
    readonly flags?: pulumi.Input<number>;
    /**
     * The FQDN of the record
     */
    readonly fqdn?: pulumi.Input<string>;
    /**
     * The name of the record
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The port of the record, for SRV records.
     */
    readonly port?: pulumi.Input<number>;
    /**
     * The priority of the record, for MX and SRV
     * records.
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * The tag of the record (one of `issue`, `wildissue`, or `iodef`), for CAA records.
     */
    readonly tag?: pulumi.Input<string>;
    /**
     * The time to live for the record, in seconds.
     */
    readonly ttl?: pulumi.Input<number>;
    /**
     * The type of record
     */
    readonly type?: pulumi.Input<string>;
    /**
     * The value of the record
     */
    readonly value?: pulumi.Input<string>;
    /**
     * The weight of the record, for SRV records.
     */
    readonly weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DNSRecord resource.
 */
export interface DNSRecordArgs {
    /**
     * The domain to add the record to
     */
    readonly domain: pulumi.Input<string>;
    /**
     * The flags of the record (integer between 0-255), for CAA records.
     */
    readonly flags?: pulumi.Input<number>;
    /**
     * The name of the record
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The port of the record, for SRV records.
     */
    readonly port?: pulumi.Input<number>;
    /**
     * The priority of the record, for MX and SRV
     * records.
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * The tag of the record (one of `issue`, `wildissue`, or `iodef`), for CAA records.
     */
    readonly tag?: pulumi.Input<string>;
    /**
     * The time to live for the record, in seconds.
     */
    readonly ttl?: pulumi.Input<number>;
    /**
     * The type of record
     */
    readonly type: pulumi.Input<string>;
    /**
     * The value of the record
     */
    readonly value: pulumi.Input<string>;
    /**
     * The weight of the record, for SRV records.
     */
    readonly weight?: pulumi.Input<number>;
}
