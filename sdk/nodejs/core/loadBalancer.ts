// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a DigitalOcean Load Balancer resource. This can be used to create,
 * modify, and delete Load Balancers.
 */
export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState): LoadBalancer {
        return new LoadBalancer(name, <any>state, { id });
    }

    /**
     * The load balancing algorithm used to determine
     * which backend Droplet will be selected by a client. It must be either `round_robin`
     * or `least_connections`. The default value is `round_robin`.
     */
    public readonly algorithm: pulumi.Output<string | undefined>;
    /**
     * A list of the IDs of each droplet to be attached to the Load Balancer.
     */
    public readonly dropletIds: pulumi.Output<number[]>;
    /**
     * The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
     */
    public readonly dropletTag: pulumi.Output<string | undefined>;
    /**
     * A list of `forwarding_rule` to be assigned to the
     * Load Balancer. The `forwarding_rule` block is documented below.
     */
    public readonly forwardingRules: pulumi.Output<{ certificateId?: string, entryPort: number, entryProtocol: string, targetPort: number, targetProtocol: string, tlsPassthrough?: boolean }[]>;
    /**
     * A `healthcheck` block to be assigned to the
     * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
     */
    public readonly healthcheck: pulumi.Output<{ checkIntervalSeconds?: number, healthyThreshold?: number, path?: string, port: number, protocol: string, responseTimeoutSeconds?: number, unhealthyThreshold?: number }>;
    public /*out*/ readonly ip: pulumi.Output<string>;
    /**
     * The Load Balancer name
     */
    public readonly name: pulumi.Output<string>;
    /**
     * A boolean value indicating whether
     * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
     * Default value is `false`.
     */
    public readonly redirectHttpToHttps: pulumi.Output<boolean | undefined>;
    /**
     * The region to start in
     */
    public readonly region: pulumi.Output<string>;
    public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * A `sticky_sessions` block to be assigned to the
     * Load Balancer. The `sticky_sessions` block is documented below. Only 1 sticky_sessions block is allowed.
     */
    public readonly stickySessions: pulumi.Output<{ cookieName?: string, cookieTtlSeconds?: number, type?: string }>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: LoadBalancerState = argsOrState as LoadBalancerState | undefined;
            inputs["algorithm"] = state ? state.algorithm : undefined;
            inputs["dropletIds"] = state ? state.dropletIds : undefined;
            inputs["dropletTag"] = state ? state.dropletTag : undefined;
            inputs["forwardingRules"] = state ? state.forwardingRules : undefined;
            inputs["healthcheck"] = state ? state.healthcheck : undefined;
            inputs["ip"] = state ? state.ip : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["redirectHttpToHttps"] = state ? state.redirectHttpToHttps : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["stickySessions"] = state ? state.stickySessions : undefined;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if (!args || args.forwardingRules === undefined) {
                throw new Error("Missing required property 'forwardingRules'");
            }
            if (!args || args.region === undefined) {
                throw new Error("Missing required property 'region'");
            }
            inputs["algorithm"] = args ? args.algorithm : undefined;
            inputs["dropletIds"] = args ? args.dropletIds : undefined;
            inputs["dropletTag"] = args ? args.dropletTag : undefined;
            inputs["forwardingRules"] = args ? args.forwardingRules : undefined;
            inputs["healthcheck"] = args ? args.healthcheck : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["redirectHttpToHttps"] = args ? args.redirectHttpToHttps : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["stickySessions"] = args ? args.stickySessions : undefined;
            inputs["ip"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        super("do:core/loadBalancer:LoadBalancer", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    /**
     * The load balancing algorithm used to determine
     * which backend Droplet will be selected by a client. It must be either `round_robin`
     * or `least_connections`. The default value is `round_robin`.
     */
    readonly algorithm?: pulumi.Input<string>;
    /**
     * A list of the IDs of each droplet to be attached to the Load Balancer.
     */
    readonly dropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
     */
    readonly dropletTag?: pulumi.Input<string>;
    /**
     * A list of `forwarding_rule` to be assigned to the
     * Load Balancer. The `forwarding_rule` block is documented below.
     */
    readonly forwardingRules?: pulumi.Input<pulumi.Input<{ certificateId?: pulumi.Input<string>, entryPort: pulumi.Input<number>, entryProtocol: pulumi.Input<string>, targetPort: pulumi.Input<number>, targetProtocol: pulumi.Input<string>, tlsPassthrough?: pulumi.Input<boolean> }>[]>;
    /**
     * A `healthcheck` block to be assigned to the
     * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
     */
    readonly healthcheck?: pulumi.Input<{ checkIntervalSeconds?: pulumi.Input<number>, healthyThreshold?: pulumi.Input<number>, path?: pulumi.Input<string>, port: pulumi.Input<number>, protocol: pulumi.Input<string>, responseTimeoutSeconds?: pulumi.Input<number>, unhealthyThreshold?: pulumi.Input<number> }>;
    readonly ip?: pulumi.Input<string>;
    /**
     * The Load Balancer name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A boolean value indicating whether
     * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
     * Default value is `false`.
     */
    readonly redirectHttpToHttps?: pulumi.Input<boolean>;
    /**
     * The region to start in
     */
    readonly region?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    /**
     * A `sticky_sessions` block to be assigned to the
     * Load Balancer. The `sticky_sessions` block is documented below. Only 1 sticky_sessions block is allowed.
     */
    readonly stickySessions?: pulumi.Input<{ cookieName?: pulumi.Input<string>, cookieTtlSeconds?: pulumi.Input<number>, type?: pulumi.Input<string> }>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * The load balancing algorithm used to determine
     * which backend Droplet will be selected by a client. It must be either `round_robin`
     * or `least_connections`. The default value is `round_robin`.
     */
    readonly algorithm?: pulumi.Input<string>;
    /**
     * A list of the IDs of each droplet to be attached to the Load Balancer.
     */
    readonly dropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
     */
    readonly dropletTag?: pulumi.Input<string>;
    /**
     * A list of `forwarding_rule` to be assigned to the
     * Load Balancer. The `forwarding_rule` block is documented below.
     */
    readonly forwardingRules: pulumi.Input<pulumi.Input<{ certificateId?: pulumi.Input<string>, entryPort: pulumi.Input<number>, entryProtocol: pulumi.Input<string>, targetPort: pulumi.Input<number>, targetProtocol: pulumi.Input<string>, tlsPassthrough?: pulumi.Input<boolean> }>[]>;
    /**
     * A `healthcheck` block to be assigned to the
     * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
     */
    readonly healthcheck?: pulumi.Input<{ checkIntervalSeconds?: pulumi.Input<number>, healthyThreshold?: pulumi.Input<number>, path?: pulumi.Input<string>, port: pulumi.Input<number>, protocol: pulumi.Input<string>, responseTimeoutSeconds?: pulumi.Input<number>, unhealthyThreshold?: pulumi.Input<number> }>;
    /**
     * The Load Balancer name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A boolean value indicating whether
     * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
     * Default value is `false`.
     */
    readonly redirectHttpToHttps?: pulumi.Input<boolean>;
    /**
     * The region to start in
     */
    readonly region: pulumi.Input<string>;
    /**
     * A `sticky_sessions` block to be assigned to the
     * Load Balancer. The `sticky_sessions` block is documented below. Only 1 sticky_sessions block is allowed.
     */
    readonly stickySessions?: pulumi.Input<{ cookieName?: pulumi.Input<string>, cookieTtlSeconds?: pulumi.Input<number>, type?: pulumi.Input<string> }>;
}
