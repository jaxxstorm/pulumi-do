# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Firewall(pulumi.CustomResource):
    """
    Provides a DigitalOcean Cloud Firewall resource. This can be used to create,
    modify, and delete Firewalls.
    """
    def __init__(__self__, __name__, __opts__=None, droplet_ids=None, inbound_rules=None, name=None, outbound_rules=None, tags=None):
        """Create a Firewall resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if droplet_ids and not isinstance(droplet_ids, list):
            raise TypeError('Expected property droplet_ids to be a list')
        __self__.droplet_ids = droplet_ids
        """
        The list of the IDs of the Droplets assigned
        to the Firewall.
        """
        __props__['dropletIds'] = droplet_ids

        if inbound_rules and not isinstance(inbound_rules, list):
            raise TypeError('Expected property inbound_rules to be a list')
        __self__.inbound_rules = inbound_rules
        """
        The inbound access rule block for the Firewall.
        The `inbound_rule` block is documented below.
        """
        __props__['inboundRules'] = inbound_rules

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The Firewall name
        """
        __props__['name'] = name

        if outbound_rules and not isinstance(outbound_rules, list):
            raise TypeError('Expected property outbound_rules to be a list')
        __self__.outbound_rules = outbound_rules
        """
        The outbound access rule block for the Firewall.
        The `outbound_rule` block is documented below.
        """
        __props__['outboundRules'] = outbound_rules

        if tags and not isinstance(tags, list):
            raise TypeError('Expected property tags to be a list')
        __self__.tags = tags
        """
        The names of the Tags assigned to the Firewall.
        """
        __props__['tags'] = tags

        __self__.created_at = pulumi.runtime.UNKNOWN
        """
        A time value given in ISO8601 combined date and time format
        that represents when the Firewall was created.
        """
        __self__.pending_changes = pulumi.runtime.UNKNOWN
        """
        An list of object containing the fields, "droplet_id",
        "removing", and "status".  It is provided to detail exactly which Droplets
        are having their security policies updated.  When empty, all changes
        have been successfully applied.
        """
        __self__.status = pulumi.runtime.UNKNOWN
        """
        A status string indicating the current state of the Firewall.
        This can be "waiting", "succeeded", or "failed".
        """

        super(Firewall, __self__).__init__(
            'do:core/firewall:Firewall',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'createdAt' in outs:
            self.created_at = outs['createdAt']
        if 'dropletIds' in outs:
            self.droplet_ids = outs['dropletIds']
        if 'inboundRules' in outs:
            self.inbound_rules = outs['inboundRules']
        if 'name' in outs:
            self.name = outs['name']
        if 'outboundRules' in outs:
            self.outbound_rules = outs['outboundRules']
        if 'pendingChanges' in outs:
            self.pending_changes = outs['pendingChanges']
        if 'status' in outs:
            self.status = outs['status']
        if 'tags' in outs:
            self.tags = outs['tags']
