# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class VolumeSnapshot(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, name=None, volume_id=None):
        """Create a VolumeSnapshot resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if not volume_id:
            raise TypeError('Missing required property volume_id')
        elif not isinstance(volume_id, basestring):
            raise TypeError('Expected property volume_id to be a basestring')
        __self__.volume_id = volume_id
        __props__['volumeId'] = volume_id

        __self__.created_at = pulumi.runtime.UNKNOWN
        __self__.min_disk_size = pulumi.runtime.UNKNOWN
        __self__.regions = pulumi.runtime.UNKNOWN
        __self__.size = pulumi.runtime.UNKNOWN

        super(VolumeSnapshot, __self__).__init__(
            'do:core/volumeSnapshot:VolumeSnapshot',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'createdAt' in outs:
            self.created_at = outs['createdAt']
        if 'minDiskSize' in outs:
            self.min_disk_size = outs['minDiskSize']
        if 'name' in outs:
            self.name = outs['name']
        if 'regions' in outs:
            self.regions = outs['regions']
        if 'size' in outs:
            self.size = outs['size']
        if 'volumeId' in outs:
            self.volume_id = outs['volumeId']
