# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class GetCertificateResult(object):
    """
    A collection of values returned by getCertificate.
    """
    def __init__(__self__, domains=None, not_after=None, sha1_fingerprint=None, state=None, type=None, id=None):
        if domains and not isinstance(domains, list):
            raise TypeError('Expected argument domains to be a list')
        __self__.domains = domains
        if not_after and not isinstance(not_after, basestring):
            raise TypeError('Expected argument not_after to be a basestring')
        __self__.not_after = not_after
        if sha1_fingerprint and not isinstance(sha1_fingerprint, basestring):
            raise TypeError('Expected argument sha1_fingerprint to be a basestring')
        __self__.sha1_fingerprint = sha1_fingerprint
        if state and not isinstance(state, basestring):
            raise TypeError('Expected argument state to be a basestring')
        __self__.state = state
        if type and not isinstance(type, basestring):
            raise TypeError('Expected argument type to be a basestring')
        __self__.type = type
        if id and not isinstance(id, basestring):
            raise TypeError('Expected argument id to be a basestring')
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

def get_certificate(name=None):
    __args__ = dict()

    __args__['name'] = name
    __ret__ = pulumi.runtime.invoke('do:core/getCertificate:getCertificate', __args__)

    return GetCertificateResult(
        domains=__ret__.get('domains'),
        not_after=__ret__.get('notAfter'),
        sha1_fingerprint=__ret__.get('sha1Fingerprint'),
        state=__ret__.get('state'),
        type=__ret__.get('type'),
        id=__ret__.get('id'))
